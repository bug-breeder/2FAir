# name: CI

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# env:
#   GO_VERSION: '1.21'
#   NODE_VERSION: '20'

# jobs:
#   # Frontend CI
#   frontend:
#     name: Frontend CI
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./client

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'yarn'
#         cache-dependency-path: client/yarn.lock

#     - name: Install dependencies
#       run: yarn install --frozen-lockfile

#     - name: Check formatting
#       run: yarn format:check

#     - name: Run linting
#       run: yarn lint

#     - name: Run type checking
#       run: yarn tsc --noEmit

#     - name: Run tests
#       run: yarn test:run

#     - name: Run tests with coverage
#       run: yarn test:coverage

#     - name: Upload coverage reports
#       uses: codecov/codecov-action@v4
#       with:
#         file: ./client/coverage/lcov.info
#         flags: frontend
#         name: frontend-coverage
#         fail_ci_if_error: false

#     - name: Build frontend
#       run: yarn build

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: frontend-build
#         path: client/dist/
#         retention-days: 7

#   # Backend CI
#   backend:
#     name: Backend CI
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./server

#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_USER: postgres
#           POSTGRES_DB: 2fair_test
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: ${{ env.GO_VERSION }}
#         cache-dependency-path: server/go.sum

#     - name: Download dependencies
#       run: go mod download

#     - name: Verify dependencies
#       run: go mod verify

#     - name: Run go vet
#       run: go vet ./...

#     - name: Run staticcheck
#       uses: dominikh/staticcheck-action@v1.3.0
#       with:
#         version: "2023.1.6"
#         install-go: false
#         working-directory: server

#     - name: Run golangci-lint
#       uses: golangci/golangci-lint-action@v3
#       with:
#         version: latest
#         working-directory: server
#         args: --timeout=5m

#     - name: Run tests
#       env:
#         DB_HOST: localhost
#         DB_PORT: 5432
#         DB_USER: postgres
#         DB_PASSWORD: postgres
#         DB_NAME: 2fair_test
#         DB_SSL_MODE: disable
#         JWT_SIGNING_KEY: test-jwt-key-for-ci
#         OAUTH_SESSION_SECRET: test-oauth-session-secret-for-ci
#         WEBAUTHN_RP_ID: localhost
#         WEBAUTHN_RP_DISPLAY_NAME: 2FAir Test
#         WEBAUTHN_RP_ORIGINS: http://localhost:3000
#         ENVIRONMENT: test
#       run: go test -v -race -coverprofile=coverage.out ./...

#     - name: Generate test coverage report
#       run: go tool cover -html=coverage.out -o coverage.html

#     - name: Upload coverage reports
#       uses: codecov/codecov-action@v4
#       with:
#         file: ./server/coverage.out
#         flags: backend
#         name: backend-coverage
#         fail_ci_if_error: false

#     - name: Build backend
#       run: go build -o bin/2fair-server ./cmd/server

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: backend-build
#         path: server/bin/2fair-server
#         retention-days: 7

#   # Security scanning
#   security:
#     name: Security Scan
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Run Trivy vulnerability scanner
#       uses: aquasecurity/trivy-action@master
#       with:
#         scan-type: 'fs'
#         scan-ref: '.'
#         format: 'sarif'
#         output: 'trivy-results.sarif'

#     - name: Upload Trivy scan results to GitHub Security tab
#       uses: github/codeql-action/upload-sarif@v2
#       if: always()
#       with:
#         sarif_file: 'trivy-results.sarif'

#   # Integration test
#   integration:
#     name: Integration Tests
#     runs-on: ubuntu-latest
#     needs: [frontend, backend]
#     if: github.event_name == 'pull_request'

#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_USER: postgres
#           POSTGRES_DB: 2fair_test
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#         ports:
#           - 5432:5432

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'yarn'
#         cache-dependency-path: client/yarn.lock

#     - name: Setup Go
#       uses: actions/setup-go@v4
#       with:
#         go-version: ${{ env.GO_VERSION }}
#         cache-dependency-path: server/go.sum

#     - name: Download frontend artifacts
#       uses: actions/download-artifact@v4
#       with:
#         name: frontend-build
#         path: client/dist/

#     - name: Download backend artifacts
#       uses: actions/download-artifact@v4
#       with:
#         name: backend-build
#         path: server/bin/

#     - name: Make backend executable
#       run: chmod +x server/bin/2fair-server

#     - name: Install frontend dependencies
#       working-directory: ./client
#       run: yarn install --frozen-lockfile

#     - name: Start backend server
#       working-directory: ./server
#       env:
#         DB_HOST: localhost
#         DB_PORT: 5432
#         DB_USER: postgres
#         DB_PASSWORD: postgres
#         DB_NAME: 2fair_test
#         DB_SSL_MODE: disable
#         JWT_SIGNING_KEY: test-jwt-key-for-ci
#         OAUTH_SESSION_SECRET: test-oauth-session-secret-for-ci
#         WEBAUTHN_RP_ID: localhost
#         WEBAUTHN_RP_DISPLAY_NAME: 2FAir Test
#         WEBAUTHN_RP_ORIGINS: http://localhost:3000
#         ENVIRONMENT: test
#         PORT: 8080
#       run: |
#         ./bin/2fair-server &
#         sleep 10

#     - name: Run integration tests
#       working-directory: ./client
#       run: |
#         # Wait for backend to be ready
#         timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done'
        
#         # Run e2e tests (if you have them)
#         # yarn test:e2e

#     - name: Health check
#       run: |
#         curl -f http://localhost:8080/health
#         curl -f http://localhost:8080/api/v1/auth/providers 