---
description: 
globs: 
alwaysApply: true
---
You are an expert developer creating a React frontend using HeroUI, Tailwind CSS, Vite, Yarn, TanStack Query, Zustand, and a Golang backend using the Gin framework, PostgreSQL, and SQLC. Follow these comprehensive guidelines to ensure best practices, consistency, maintainability, and performance.

Development Philosophy

* Write clean, readable, maintainable, and scalable code.
* Adhere strictly to SOLID principles.
* Favor functional programming patterns.
* Ensure strong type safety and leverage static analysis.
* Emphasize modularity and composability.

Frontend Guidelines
React and General Best Practices

* Use functional components with TypeScript.
* Define components using the function keyword.
* Extract logic into reusable custom hooks prefixed with 'use'.
* Avoid inline functions within JSX; use useCallback and useMemo strategically.
* Ensure components are small, modular, and highly reusable.
* Use `yarn` as the package manager.

State Management

* Utilize Zustand for global state management.
* Structure Zustand stores clearly with actions and selectors for state access.
* Prefer local state (`useState`) for component-specific data.

Data Fetching

* Use TanStack Query for efficient server state management and caching.
* Clearly separate queries, mutations, and invalidation logic.
* Implement optimistic updates and proper error handling for mutations.
* Always handle loading and error states clearly in the UI.

Styling and UI

* Use HeroUI components whenever possible for consistency and accessibility.
* Utilize Tailwind CSS for all styling.
* Implement responsive and mobile-first designs.
* Consistently use Tailwind utility classes to avoid custom CSS.

Naming Conventions

* PascalCase for components, type definitions, and interfaces.
* kebab-case for filenames and directories (e.g., `user-profile.tsx`).
* camelCase for variables, functions, hooks, and props.
* Prefix boolean variables with verbs: `isLoading`, `hasError`, `canSubmit`.
* Prefix event handlers with `handle`: `handleClick`, `handleSubmit`.

Backend Guidelines
Golang & Gin Framework Best Practices

* Use Gin framework with clearly defined middleware for logging, error handling, and authentication.
* Clearly separate routing, controllers, services, and data models.
* Implement proper error handling with informative messages and appropriate HTTP status codes.
* Use JSON responses consistently with standard formatting.
* Validate inputs rigorously to prevent security vulnerabilities.

Database Interaction

* Use SQLC to generate safe and efficient database queries.
* Design PostgreSQL schema clearly and normalize database structure to avoid redundancy.
* Implement migrations and ensure version control for schema changes.

Naming Conventions

* Use snake\_case for SQL schema and database entities.
* CamelCase for Golang structs and exported functions/methods.
* Keep SQL queries organized and documented within the codebase.

Security

* Sanitize inputs strictly to prevent injection attacks.
* Use environment variables for sensitive information and configurations.
* Implement JWT for authentication and ensure proper expiration and refresh strategies.

Testing
Frontend

* Write unit tests with Jest and React Testing Library.
* Test critical paths, components, hooks, and utility functions thoroughly.
* Mock external dependencies and API responses clearly.

Backend

* Write comprehensive tests for Gin handlers, services, and database interactions.
* Use table-driven tests and Go's testing package for clear, maintainable test code.
* Implement integration tests for critical business logic and API endpoints.

Documentation

* Use JSDoc/TSDoc for frontend components, hooks, and functions.
* Use GoDoc comments for backend structs, methods, and handlers.
* Maintain clear README files with setup instructions, environment configuration, and usage examples.

Accessibility (a11y)

* Follow semantic HTML and ARIA guidelines for accessibility.
* Ensure keyboard navigation and color contrast compliance.
* Test using accessibility tools and screen readers regularly.

Performance Optimization
Frontend

* Minimize component re-renders and unnecessary calculations.
* Implement lazy loading and code splitting effectively with React and Vite.

Backend

* Optimize database queries and indexes proactively.
* Utilize Golang concurrency features for performance-critical endpoints.

This comprehensive rule set ensures a high-quality, maintainable, scalable, and performant project using React and Golang technologies.
