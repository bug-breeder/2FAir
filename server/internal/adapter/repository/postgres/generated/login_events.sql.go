// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: login_events.sql

package generated

import (
	"context"
)

const addLoginEvent = `-- name: AddLoginEvent :one
INSERT INTO login_events (
  user_id,
  ip_address,
  user_agent
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, timestamp, ip_address, user_agent
`

type AddLoginEventParams struct {
	UserID    int32  `json:"user_id"`
	IpAddress string `json:"ip_address"`
	UserAgent string `json:"user_agent"`
}

func (q *Queries) AddLoginEvent(ctx context.Context, arg AddLoginEventParams) (LoginEvent, error) {
	row := q.db.QueryRow(ctx, addLoginEvent, arg.UserID, arg.IpAddress, arg.UserAgent)
	var i LoginEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Timestamp,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getLoginEventByID = `-- name: GetLoginEventByID :one
SELECT id, user_id, timestamp, ip_address, user_agent FROM login_events WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetLoginEventByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetLoginEventByID(ctx context.Context, arg GetLoginEventByIDParams) (LoginEvent, error) {
	row := q.db.QueryRow(ctx, getLoginEventByID, arg.ID, arg.UserID)
	var i LoginEvent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Timestamp,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const listLoginEvents = `-- name: ListLoginEvents :many
SELECT id, user_id, timestamp, ip_address, user_agent FROM login_events WHERE user_id = $1 ORDER BY timestamp DESC LIMIT $2
`

type ListLoginEventsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListLoginEvents(ctx context.Context, arg ListLoginEventsParams) ([]LoginEvent, error) {
	rows, err := q.db.Query(ctx, listLoginEvents, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LoginEvent{}
	for rows.Next() {
		var i LoginEvent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Timestamp,
			&i.IpAddress,
			&i.UserAgent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLoginEvent = `-- name: RemoveLoginEvent :exec
DELETE FROM login_events WHERE id = $1 AND user_id = $2
`

type RemoveLoginEventParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) RemoveLoginEvent(ctx context.Context, arg RemoveLoginEventParams) error {
	_, err := q.db.Exec(ctx, removeLoginEvent, arg.ID, arg.UserID)
	return err
}
