// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: totp_seeds.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEncryptedTOTPSeed = `-- name: CreateEncryptedTOTPSeed :one
INSERT INTO encrypted_totp_seeds (
    user_id, key_version, ciphertext, iv, auth_tag,
    issuer, account_name, icon_url, tags
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at
`

type CreateEncryptedTOTPSeedParams struct {
	UserID      pgtype.UUID `json:"user_id"`
	KeyVersion  int32       `json:"key_version"`
	Ciphertext  []byte      `json:"ciphertext"`
	Iv          []byte      `json:"iv"`
	AuthTag     []byte      `json:"auth_tag"`
	Issuer      string      `json:"issuer"`
	AccountName string      `json:"account_name"`
	IconUrl     pgtype.Text `json:"icon_url"`
	Tags        []string    `json:"tags"`
}

func (q *Queries) CreateEncryptedTOTPSeed(ctx context.Context, arg CreateEncryptedTOTPSeedParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, createEncryptedTOTPSeed,
		arg.UserID,
		arg.KeyVersion,
		arg.Ciphertext,
		arg.Iv,
		arg.AuthTag,
		arg.Issuer,
		arg.AccountName,
		arg.IconUrl,
		arg.Tags,
	)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.Ciphertext,
		&i.Iv,
		&i.AuthTag,
		&i.Issuer,
		&i.AccountName,
		&i.IconUrl,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SyncedAt,
	)
	return i, err
}

const deleteEncryptedTOTPSeed = `-- name: DeleteEncryptedTOTPSeed :exec
DELETE FROM encrypted_totp_seeds
WHERE id = $1 AND user_id = $2
`

type DeleteEncryptedTOTPSeedParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteEncryptedTOTPSeed(ctx context.Context, arg DeleteEncryptedTOTPSeedParams) error {
	_, err := q.db.Exec(ctx, deleteEncryptedTOTPSeed, arg.ID, arg.UserID)
	return err
}

const getEncryptedTOTPSeedByID = `-- name: GetEncryptedTOTPSeedByID :one
SELECT id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at FROM encrypted_totp_seeds
WHERE id = $1 AND user_id = $2
`

type GetEncryptedTOTPSeedByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetEncryptedTOTPSeedByID(ctx context.Context, arg GetEncryptedTOTPSeedByIDParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, getEncryptedTOTPSeedByID, arg.ID, arg.UserID)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.Ciphertext,
		&i.Iv,
		&i.AuthTag,
		&i.Issuer,
		&i.AccountName,
		&i.IconUrl,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SyncedAt,
	)
	return i, err
}

const getEncryptedTOTPSeedsByUserID = `-- name: GetEncryptedTOTPSeedsByUserID :many
SELECT id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at FROM encrypted_totp_seeds
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetEncryptedTOTPSeedsByUserID(ctx context.Context, userID pgtype.UUID) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, getEncryptedTOTPSeedsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.KeyVersion,
			&i.Ciphertext,
			&i.Iv,
			&i.AuthTag,
			&i.Issuer,
			&i.AccountName,
			&i.IconUrl,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SyncedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEncryptedTOTPSeedsByUserIDSince = `-- name: GetEncryptedTOTPSeedsByUserIDSince :many
SELECT id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at FROM encrypted_totp_seeds
WHERE user_id = $1 AND updated_at > $2
ORDER BY updated_at ASC
`

type GetEncryptedTOTPSeedsByUserIDSinceParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetEncryptedTOTPSeedsByUserIDSince(ctx context.Context, arg GetEncryptedTOTPSeedsByUserIDSinceParams) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, getEncryptedTOTPSeedsByUserIDSince, arg.UserID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.KeyVersion,
			&i.Ciphertext,
			&i.Iv,
			&i.AuthTag,
			&i.Issuer,
			&i.AccountName,
			&i.IconUrl,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SyncedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTOTPSeedsCountByUser = `-- name: GetTOTPSeedsCountByUser :one
SELECT COUNT(*) FROM encrypted_totp_seeds
WHERE user_id = $1
`

func (q *Queries) GetTOTPSeedsCountByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTOTPSeedsCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const searchEncryptedTOTPSeeds = `-- name: SearchEncryptedTOTPSeeds :many
SELECT id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at FROM encrypted_totp_seeds
WHERE user_id = $1
    AND (
        issuer ILIKE '%' || $2 || '%'
        OR account_name ILIKE '%' || $2 || '%'
        OR $2 = ANY(tags)
    )
ORDER BY created_at DESC
`

type SearchEncryptedTOTPSeedsParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Column2 pgtype.Text `json:"column_2"`
}

func (q *Queries) SearchEncryptedTOTPSeeds(ctx context.Context, arg SearchEncryptedTOTPSeedsParams) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, searchEncryptedTOTPSeeds, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.KeyVersion,
			&i.Ciphertext,
			&i.Iv,
			&i.AuthTag,
			&i.Issuer,
			&i.AccountName,
			&i.IconUrl,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SyncedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEncryptedTOTPSeed = `-- name: UpdateEncryptedTOTPSeed :one
UPDATE encrypted_totp_seeds
SET ciphertext = COALESCE($3, ciphertext),
    iv = COALESCE($4, iv),
    auth_tag = COALESCE($5, auth_tag),
    issuer = COALESCE($6, issuer),
    account_name = COALESCE($7, account_name),
    icon_url = COALESCE($8, icon_url),
    tags = COALESCE($9, tags),
    synced_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, key_version, ciphertext, iv, auth_tag, issuer, account_name, icon_url, tags, created_at, updated_at, synced_at
`

type UpdateEncryptedTOTPSeedParams struct {
	ID          pgtype.UUID `json:"id"`
	UserID      pgtype.UUID `json:"user_id"`
	Ciphertext  []byte      `json:"ciphertext"`
	Iv          []byte      `json:"iv"`
	AuthTag     []byte      `json:"auth_tag"`
	Issuer      pgtype.Text `json:"issuer"`
	AccountName pgtype.Text `json:"account_name"`
	IconUrl     pgtype.Text `json:"icon_url"`
	Tags        []string    `json:"tags"`
}

func (q *Queries) UpdateEncryptedTOTPSeed(ctx context.Context, arg UpdateEncryptedTOTPSeedParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, updateEncryptedTOTPSeed,
		arg.ID,
		arg.UserID,
		arg.Ciphertext,
		arg.Iv,
		arg.AuthTag,
		arg.Issuer,
		arg.AccountName,
		arg.IconUrl,
		arg.Tags,
	)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.Ciphertext,
		&i.Iv,
		&i.AuthTag,
		&i.Issuer,
		&i.AccountName,
		&i.IconUrl,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SyncedAt,
	)
	return i, err
}

const updateTOTPSeedSyncTimestamp = `-- name: UpdateTOTPSeedSyncTimestamp :exec
UPDATE encrypted_totp_seeds
SET synced_at = NOW()
WHERE id = $1 AND user_id = $2
`

type UpdateTOTPSeedSyncTimestampParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateTOTPSeedSyncTimestamp(ctx context.Context, arg UpdateTOTPSeedSyncTimestampParams) error {
	_, err := q.db.Exec(ctx, updateTOTPSeedSyncTimestamp, arg.ID, arg.UserID)
	return err
}
