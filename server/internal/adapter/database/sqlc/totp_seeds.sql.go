// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: totp_seeds.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEncryptedTOTPSeed = `-- name: CreateEncryptedTOTPSeed :one
INSERT INTO encrypted_totp_seeds (
    user_id, service_name, account_identifier, encrypted_secret,
    algorithm, digits, period, issuer, icon_url, is_active
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at
`

type CreateEncryptedTOTPSeedParams struct {
	UserID            pgtype.UUID `json:"user_id"`
	ServiceName       string      `json:"service_name"`
	AccountIdentifier string      `json:"account_identifier"`
	EncryptedSecret   []byte      `json:"encrypted_secret"`
	Algorithm         string      `json:"algorithm"`
	Digits            int32       `json:"digits"`
	Period            int32       `json:"period"`
	Issuer            pgtype.Text `json:"issuer"`
	IconUrl           pgtype.Text `json:"icon_url"`
	IsActive          pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateEncryptedTOTPSeed(ctx context.Context, arg CreateEncryptedTOTPSeedParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, createEncryptedTOTPSeed,
		arg.UserID,
		arg.ServiceName,
		arg.AccountIdentifier,
		arg.EncryptedSecret,
		arg.Algorithm,
		arg.Digits,
		arg.Period,
		arg.Issuer,
		arg.IconUrl,
		arg.IsActive,
	)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceName,
		&i.AccountIdentifier,
		&i.EncryptedSecret,
		&i.Algorithm,
		&i.Digits,
		&i.Period,
		&i.Issuer,
		&i.IconUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEncryptedTOTPSeed = `-- name: DeleteEncryptedTOTPSeed :exec
UPDATE encrypted_totp_seeds
SET is_active = FALSE, updated_at = NOW()
WHERE id = $1 AND user_id = $2
`

type DeleteEncryptedTOTPSeedParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteEncryptedTOTPSeed(ctx context.Context, arg DeleteEncryptedTOTPSeedParams) error {
	_, err := q.db.Exec(ctx, deleteEncryptedTOTPSeed, arg.ID, arg.UserID)
	return err
}

const getEncryptedTOTPSeedByID = `-- name: GetEncryptedTOTPSeedByID :one
SELECT id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at FROM encrypted_totp_seeds
WHERE id = $1 AND user_id = $2 AND is_active = TRUE
`

type GetEncryptedTOTPSeedByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetEncryptedTOTPSeedByID(ctx context.Context, arg GetEncryptedTOTPSeedByIDParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, getEncryptedTOTPSeedByID, arg.ID, arg.UserID)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceName,
		&i.AccountIdentifier,
		&i.EncryptedSecret,
		&i.Algorithm,
		&i.Digits,
		&i.Period,
		&i.Issuer,
		&i.IconUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEncryptedTOTPSeedsByUserID = `-- name: GetEncryptedTOTPSeedsByUserID :many
SELECT id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at FROM encrypted_totp_seeds
WHERE user_id = $1 AND is_active = TRUE
ORDER BY created_at DESC
`

func (q *Queries) GetEncryptedTOTPSeedsByUserID(ctx context.Context, userID pgtype.UUID) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, getEncryptedTOTPSeedsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ServiceName,
			&i.AccountIdentifier,
			&i.EncryptedSecret,
			&i.Algorithm,
			&i.Digits,
			&i.Period,
			&i.Issuer,
			&i.IconUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEncryptedTOTPSeedsByUserIDSince = `-- name: GetEncryptedTOTPSeedsByUserIDSince :many
SELECT id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at FROM encrypted_totp_seeds
WHERE user_id = $1 AND updated_at > $2 AND is_active = TRUE
ORDER BY updated_at ASC
`

type GetEncryptedTOTPSeedsByUserIDSinceParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetEncryptedTOTPSeedsByUserIDSince(ctx context.Context, arg GetEncryptedTOTPSeedsByUserIDSinceParams) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, getEncryptedTOTPSeedsByUserIDSince, arg.UserID, arg.UpdatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ServiceName,
			&i.AccountIdentifier,
			&i.EncryptedSecret,
			&i.Algorithm,
			&i.Digits,
			&i.Period,
			&i.Issuer,
			&i.IconUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTOTPSeedsCountByUser = `-- name: GetTOTPSeedsCountByUser :one
SELECT COUNT(*) FROM encrypted_totp_seeds
WHERE user_id = $1 AND is_active = TRUE
`

func (q *Queries) GetTOTPSeedsCountByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTOTPSeedsCountByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const searchEncryptedTOTPSeeds = `-- name: SearchEncryptedTOTPSeeds :many
SELECT id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at FROM encrypted_totp_seeds
WHERE user_id = $1 AND is_active = TRUE
    AND (
        issuer ILIKE '%' || $2 || '%'
        OR service_name ILIKE '%' || $2 || '%'
        OR account_identifier ILIKE '%' || $2 || '%'
    )
ORDER BY created_at DESC
`

type SearchEncryptedTOTPSeedsParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Column2 pgtype.Text `json:"column_2"`
}

func (q *Queries) SearchEncryptedTOTPSeeds(ctx context.Context, arg SearchEncryptedTOTPSeedsParams) ([]EncryptedTotpSeed, error) {
	rows, err := q.db.Query(ctx, searchEncryptedTOTPSeeds, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EncryptedTotpSeed{}
	for rows.Next() {
		var i EncryptedTotpSeed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ServiceName,
			&i.AccountIdentifier,
			&i.EncryptedSecret,
			&i.Algorithm,
			&i.Digits,
			&i.Period,
			&i.Issuer,
			&i.IconUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEncryptedTOTPSeed = `-- name: UpdateEncryptedTOTPSeed :one
UPDATE encrypted_totp_seeds
SET service_name = COALESCE($3, service_name),
    account_identifier = COALESCE($4, account_identifier),
    encrypted_secret = COALESCE($5, encrypted_secret),
    algorithm = COALESCE($6, algorithm),
    digits = COALESCE($7, digits),
    period = COALESCE($8, period),
    issuer = COALESCE($9, issuer),
    icon_url = COALESCE($10, icon_url),
    updated_at = NOW()
WHERE id = $1 AND user_id = $2 AND is_active = TRUE
RETURNING id, user_id, service_name, account_identifier, encrypted_secret, algorithm, digits, period, issuer, icon_url, is_active, created_at, updated_at
`

type UpdateEncryptedTOTPSeedParams struct {
	ID                pgtype.UUID `json:"id"`
	UserID            pgtype.UUID `json:"user_id"`
	ServiceName       pgtype.Text `json:"service_name"`
	AccountIdentifier pgtype.Text `json:"account_identifier"`
	EncryptedSecret   []byte      `json:"encrypted_secret"`
	Algorithm         pgtype.Text `json:"algorithm"`
	Digits            pgtype.Int4 `json:"digits"`
	Period            pgtype.Int4 `json:"period"`
	Issuer            pgtype.Text `json:"issuer"`
	IconUrl           pgtype.Text `json:"icon_url"`
}

func (q *Queries) UpdateEncryptedTOTPSeed(ctx context.Context, arg UpdateEncryptedTOTPSeedParams) (EncryptedTotpSeed, error) {
	row := q.db.QueryRow(ctx, updateEncryptedTOTPSeed,
		arg.ID,
		arg.UserID,
		arg.ServiceName,
		arg.AccountIdentifier,
		arg.EncryptedSecret,
		arg.Algorithm,
		arg.Digits,
		arg.Period,
		arg.Issuer,
		arg.IconUrl,
	)
	var i EncryptedTotpSeed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceName,
		&i.AccountIdentifier,
		&i.EncryptedSecret,
		&i.Algorithm,
		&i.Digits,
		&i.Period,
		&i.Issuer,
		&i.IconUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTOTPSeedSyncTimestamp = `-- name: UpdateTOTPSeedSyncTimestamp :exec
UPDATE encrypted_totp_seeds
SET updated_at = NOW()
WHERE id = $1 AND user_id = $2
`

type UpdateTOTPSeedSyncTimestampParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateTOTPSeedSyncTimestamp(ctx context.Context, arg UpdateTOTPSeedSyncTimestampParams) error {
	_, err := q.db.Exec(ctx, updateTOTPSeedSyncTimestamp, arg.ID, arg.UserID)
	return err
}
