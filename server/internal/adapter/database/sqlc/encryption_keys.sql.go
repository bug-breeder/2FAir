// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: encryption_keys.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserEncryptionKey = `-- name: CreateUserEncryptionKey :one
INSERT INTO user_encryption_keys (user_id, key_version, wrapped_dek, salt)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, key_version, wrapped_dek, salt, created_at, is_active
`

type CreateUserEncryptionKeyParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	KeyVersion int32       `json:"key_version"`
	WrappedDek []byte      `json:"wrapped_dek"`
	Salt       []byte      `json:"salt"`
}

func (q *Queries) CreateUserEncryptionKey(ctx context.Context, arg CreateUserEncryptionKeyParams) (UserEncryptionKey, error) {
	row := q.db.QueryRow(ctx, createUserEncryptionKey,
		arg.UserID,
		arg.KeyVersion,
		arg.WrappedDek,
		arg.Salt,
	)
	var i UserEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.WrappedDek,
		&i.Salt,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const deactivateOldUserEncryptionKeys = `-- name: DeactivateOldUserEncryptionKeys :exec
UPDATE user_encryption_keys
SET is_active = FALSE
WHERE user_id = $1 AND key_version < $2
`

type DeactivateOldUserEncryptionKeysParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	KeyVersion int32       `json:"key_version"`
}

func (q *Queries) DeactivateOldUserEncryptionKeys(ctx context.Context, arg DeactivateOldUserEncryptionKeysParams) error {
	_, err := q.db.Exec(ctx, deactivateOldUserEncryptionKeys, arg.UserID, arg.KeyVersion)
	return err
}

const getActiveUserEncryptionKey = `-- name: GetActiveUserEncryptionKey :one
SELECT id, user_id, key_version, wrapped_dek, salt, created_at, is_active FROM user_encryption_keys
WHERE user_id = $1 AND is_active = TRUE
ORDER BY key_version DESC
LIMIT 1
`

func (q *Queries) GetActiveUserEncryptionKey(ctx context.Context, userID pgtype.UUID) (UserEncryptionKey, error) {
	row := q.db.QueryRow(ctx, getActiveUserEncryptionKey, userID)
	var i UserEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.WrappedDek,
		&i.Salt,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserEncryptionKeyByVersion = `-- name: GetUserEncryptionKeyByVersion :one
SELECT id, user_id, key_version, wrapped_dek, salt, created_at, is_active FROM user_encryption_keys
WHERE user_id = $1 AND key_version = $2
`

type GetUserEncryptionKeyByVersionParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	KeyVersion int32       `json:"key_version"`
}

func (q *Queries) GetUserEncryptionKeyByVersion(ctx context.Context, arg GetUserEncryptionKeyByVersionParams) (UserEncryptionKey, error) {
	row := q.db.QueryRow(ctx, getUserEncryptionKeyByVersion, arg.UserID, arg.KeyVersion)
	var i UserEncryptionKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.WrappedDek,
		&i.Salt,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserEncryptionKeys = `-- name: GetUserEncryptionKeys :many
SELECT id, user_id, key_version, wrapped_dek, salt, created_at, is_active FROM user_encryption_keys
WHERE user_id = $1
ORDER BY key_version DESC
`

func (q *Queries) GetUserEncryptionKeys(ctx context.Context, userID pgtype.UUID) ([]UserEncryptionKey, error) {
	rows, err := q.db.Query(ctx, getUserEncryptionKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserEncryptionKey{}
	for rows.Next() {
		var i UserEncryptionKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.KeyVersion,
			&i.WrappedDek,
			&i.Salt,
			&i.CreatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rotateUserEncryptionKey = `-- name: RotateUserEncryptionKey :one
WITH new_key AS (
    INSERT INTO user_encryption_keys (user_id, key_version, wrapped_dek, salt)
    VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, key_version, wrapped_dek, salt, created_at, is_active
),
deactivate_old AS (
    UPDATE user_encryption_keys
    SET is_active = FALSE
    WHERE user_id = $1 AND key_version < $2
)
SELECT id, user_id, key_version, wrapped_dek, salt, created_at, is_active FROM new_key
`

type RotateUserEncryptionKeyParams struct {
	UserID     pgtype.UUID `json:"user_id"`
	KeyVersion int32       `json:"key_version"`
	WrappedDek []byte      `json:"wrapped_dek"`
	Salt       []byte      `json:"salt"`
}

type RotateUserEncryptionKeyRow struct {
	ID         pgtype.UUID        `json:"id"`
	UserID     pgtype.UUID        `json:"user_id"`
	KeyVersion int32              `json:"key_version"`
	WrappedDek []byte             `json:"wrapped_dek"`
	Salt       []byte             `json:"salt"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	IsActive   pgtype.Bool        `json:"is_active"`
}

func (q *Queries) RotateUserEncryptionKey(ctx context.Context, arg RotateUserEncryptionKeyParams) (RotateUserEncryptionKeyRow, error) {
	row := q.db.QueryRow(ctx, rotateUserEncryptionKey,
		arg.UserID,
		arg.KeyVersion,
		arg.WrappedDek,
		arg.Salt,
	)
	var i RotateUserEncryptionKeyRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyVersion,
		&i.WrappedDek,
		&i.Salt,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}
