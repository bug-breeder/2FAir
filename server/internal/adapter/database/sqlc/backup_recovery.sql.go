// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: backup_recovery.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id, device_session_id, event_type,
    event_details, ip_address, user_agent
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, device_session_id, event_type, event_details, ip_address, user_agent, created_at
`

type CreateAuditLogParams struct {
	UserID          pgtype.UUID `json:"user_id"`
	DeviceSessionID pgtype.UUID `json:"device_session_id"`
	EventType       string      `json:"event_type"`
	EventDetails    []byte      `json:"event_details"`
	IpAddress       *netip.Addr `json:"ip_address"`
	UserAgent       pgtype.Text `json:"user_agent"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.DeviceSessionID,
		arg.EventType,
		arg.EventDetails,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeviceSessionID,
		&i.EventType,
		&i.EventDetails,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}

const createBackupRecoveryCode = `-- name: CreateBackupRecoveryCode :one
INSERT INTO backup_recovery_codes (user_id, encrypted_recovery_blob, salt, hint)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, encrypted_recovery_blob, salt, hint, created_at, used_at, is_active
`

type CreateBackupRecoveryCodeParams struct {
	UserID                pgtype.UUID `json:"user_id"`
	EncryptedRecoveryBlob []byte      `json:"encrypted_recovery_blob"`
	Salt                  []byte      `json:"salt"`
	Hint                  pgtype.Text `json:"hint"`
}

func (q *Queries) CreateBackupRecoveryCode(ctx context.Context, arg CreateBackupRecoveryCodeParams) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, createBackupRecoveryCode,
		arg.UserID,
		arg.EncryptedRecoveryBlob,
		arg.Salt,
		arg.Hint,
	)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedRecoveryBlob,
		&i.Salt,
		&i.Hint,
		&i.CreatedAt,
		&i.UsedAt,
		&i.IsActive,
	)
	return i, err
}

const deactivateOldBackupRecoveryCodes = `-- name: DeactivateOldBackupRecoveryCodes :exec
UPDATE backup_recovery_codes
SET is_active = FALSE
WHERE user_id = $1 AND id != $2
`

type DeactivateOldBackupRecoveryCodesParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     pgtype.UUID `json:"id"`
}

func (q *Queries) DeactivateOldBackupRecoveryCodes(ctx context.Context, arg DeactivateOldBackupRecoveryCodesParams) error {
	_, err := q.db.Exec(ctx, deactivateOldBackupRecoveryCodes, arg.UserID, arg.ID)
	return err
}

const getActiveBackupRecoveryCode = `-- name: GetActiveBackupRecoveryCode :one
SELECT id, user_id, encrypted_recovery_blob, salt, hint, created_at, used_at, is_active FROM backup_recovery_codes
WHERE user_id = $1 AND is_active = TRUE
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetActiveBackupRecoveryCode(ctx context.Context, userID pgtype.UUID) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, getActiveBackupRecoveryCode, userID)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedRecoveryBlob,
		&i.Salt,
		&i.Hint,
		&i.CreatedAt,
		&i.UsedAt,
		&i.IsActive,
	)
	return i, err
}

const getAuditLogsByEventType = `-- name: GetAuditLogsByEventType :many
SELECT id, user_id, device_session_id, event_type, event_details, ip_address, user_agent, created_at FROM audit_logs
WHERE event_type = $1
    AND created_at >= $2
    AND created_at <= $3
ORDER BY created_at DESC
LIMIT $4 OFFSET $5
`

type GetAuditLogsByEventTypeParams struct {
	EventType   string             `json:"event_type"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

func (q *Queries) GetAuditLogsByEventType(ctx context.Context, arg GetAuditLogsByEventTypeParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByEventType,
		arg.EventType,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceSessionID,
			&i.EventType,
			&i.EventDetails,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUserID = `-- name: GetAuditLogsByUserID :many
SELECT id, user_id, device_session_id, event_type, event_details, ip_address, user_agent, created_at FROM audit_logs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetAuditLogsByUserIDParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetAuditLogsByUserID(ctx context.Context, arg GetAuditLogsByUserIDParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceSessionID,
			&i.EventType,
			&i.EventDetails,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBackupRecoveryCodeByID = `-- name: GetBackupRecoveryCodeByID :one
SELECT id, user_id, encrypted_recovery_blob, salt, hint, created_at, used_at, is_active FROM backup_recovery_codes
WHERE id = $1 AND user_id = $2 AND is_active = TRUE
`

type GetBackupRecoveryCodeByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetBackupRecoveryCodeByID(ctx context.Context, arg GetBackupRecoveryCodeByIDParams) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, getBackupRecoveryCodeByID, arg.ID, arg.UserID)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedRecoveryBlob,
		&i.Salt,
		&i.Hint,
		&i.CreatedAt,
		&i.UsedAt,
		&i.IsActive,
	)
	return i, err
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT al.id, al.user_id, al.device_session_id, al.event_type, al.event_details, al.ip_address, al.user_agent, al.created_at, u.username, u.email, ds.device_name
FROM audit_logs al
LEFT JOIN users u ON al.user_id = u.id
LEFT JOIN device_sessions ds ON al.device_session_id = ds.id
WHERE al.created_at >= $1
ORDER BY al.created_at DESC
LIMIT $2 OFFSET $3
`

type GetRecentAuditLogsParams struct {
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Limit     int32              `json:"limit"`
	Offset    int32              `json:"offset"`
}

type GetRecentAuditLogsRow struct {
	ID              pgtype.UUID        `json:"id"`
	UserID          pgtype.UUID        `json:"user_id"`
	DeviceSessionID pgtype.UUID        `json:"device_session_id"`
	EventType       string             `json:"event_type"`
	EventDetails    []byte             `json:"event_details"`
	IpAddress       *netip.Addr        `json:"ip_address"`
	UserAgent       pgtype.Text        `json:"user_agent"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	Username        pgtype.Text        `json:"username"`
	Email           pgtype.Text        `json:"email"`
	DeviceName      pgtype.Text        `json:"device_name"`
}

func (q *Queries) GetRecentAuditLogs(ctx context.Context, arg GetRecentAuditLogsParams) ([]GetRecentAuditLogsRow, error) {
	rows, err := q.db.Query(ctx, getRecentAuditLogs, arg.CreatedAt, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentAuditLogsRow{}
	for rows.Next() {
		var i GetRecentAuditLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeviceSessionID,
			&i.EventType,
			&i.EventDetails,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.Username,
			&i.Email,
			&i.DeviceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const useBackupRecoveryCode = `-- name: UseBackupRecoveryCode :exec
UPDATE backup_recovery_codes
SET used_at = NOW(), is_active = FALSE
WHERE id = $1 AND user_id = $2
`

type UseBackupRecoveryCodeParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UseBackupRecoveryCode(ctx context.Context, arg UseBackupRecoveryCodeParams) error {
	_, err := q.db.Exec(ctx, useBackupRecoveryCode, arg.ID, arg.UserID)
	return err
}
