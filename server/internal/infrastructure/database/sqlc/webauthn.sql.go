// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webauthn.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWebAuthnCredential = `-- name: CreateWebAuthnCredential :one
INSERT INTO webauthn_credentials (
    user_id, credential_id, public_key, attestation_type,
    transport, flags, authenticator, device_name,
    aaguid, clone_warning, sign_count, attachment,
    backup_eligible, backup_state
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, user_id, credential_id, public_key, attestation_type, transport, flags, authenticator, device_name, created_at, last_used_at, aaguid, clone_warning, sign_count, attachment, backup_eligible, backup_state
`

type CreateWebAuthnCredentialParams struct {
	UserID          pgtype.UUID `json:"user_id"`
	CredentialID    []byte      `json:"credential_id"`
	PublicKey       []byte      `json:"public_key"`
	AttestationType string      `json:"attestation_type"`
	Transport       []string    `json:"transport"`
	Flags           []byte      `json:"flags"`
	Authenticator   []byte      `json:"authenticator"`
	DeviceName      pgtype.Text `json:"device_name"`
	Aaguid          pgtype.UUID `json:"aaguid"`
	CloneWarning    bool        `json:"clone_warning"`
	SignCount       int64       `json:"sign_count"`
	Attachment      pgtype.Text `json:"attachment"`
	BackupEligible  bool        `json:"backup_eligible"`
	BackupState     bool        `json:"backup_state"`
}

func (q *Queries) CreateWebAuthnCredential(ctx context.Context, arg CreateWebAuthnCredentialParams) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, createWebAuthnCredential,
		arg.UserID,
		arg.CredentialID,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transport,
		arg.Flags,
		arg.Authenticator,
		arg.DeviceName,
		arg.Aaguid,
		arg.CloneWarning,
		arg.SignCount,
		arg.Attachment,
		arg.BackupEligible,
		arg.BackupState,
	)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.AttestationType,
		&i.Transport,
		&i.Flags,
		&i.Authenticator,
		&i.DeviceName,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.Aaguid,
		&i.CloneWarning,
		&i.SignCount,
		&i.Attachment,
		&i.BackupEligible,
		&i.BackupState,
	)
	return i, err
}

const deleteWebAuthnCredential = `-- name: DeleteWebAuthnCredential :exec
DELETE FROM webauthn_credentials
WHERE credential_id = $1 AND user_id = $2
`

type DeleteWebAuthnCredentialParams struct {
	CredentialID []byte      `json:"credential_id"`
	UserID       pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteWebAuthnCredential(ctx context.Context, arg DeleteWebAuthnCredentialParams) error {
	_, err := q.db.Exec(ctx, deleteWebAuthnCredential, arg.CredentialID, arg.UserID)
	return err
}

const getWebAuthnCredentialByID = `-- name: GetWebAuthnCredentialByID :one
SELECT id, user_id, credential_id, public_key, attestation_type, transport, flags, authenticator, device_name, created_at, last_used_at, aaguid, clone_warning, sign_count, attachment, backup_eligible, backup_state FROM webauthn_credentials
WHERE credential_id = $1
`

func (q *Queries) GetWebAuthnCredentialByID(ctx context.Context, credentialID []byte) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, getWebAuthnCredentialByID, credentialID)
	var i WebauthnCredential
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CredentialID,
		&i.PublicKey,
		&i.AttestationType,
		&i.Transport,
		&i.Flags,
		&i.Authenticator,
		&i.DeviceName,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.Aaguid,
		&i.CloneWarning,
		&i.SignCount,
		&i.Attachment,
		&i.BackupEligible,
		&i.BackupState,
	)
	return i, err
}

const getWebAuthnCredentialsByUserID = `-- name: GetWebAuthnCredentialsByUserID :many
SELECT id, user_id, credential_id, public_key, attestation_type, transport, flags, authenticator, device_name, created_at, last_used_at, aaguid, clone_warning, sign_count, attachment, backup_eligible, backup_state FROM webauthn_credentials
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetWebAuthnCredentialsByUserID(ctx context.Context, userID pgtype.UUID) ([]WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, getWebAuthnCredentialsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebauthnCredential{}
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CredentialID,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transport,
			&i.Flags,
			&i.Authenticator,
			&i.DeviceName,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.Aaguid,
			&i.CloneWarning,
			&i.SignCount,
			&i.Attachment,
			&i.BackupEligible,
			&i.BackupState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebAuthnCredentialCloneWarning = `-- name: UpdateWebAuthnCredentialCloneWarning :exec
UPDATE webauthn_credentials
SET clone_warning = $2
WHERE credential_id = $1
`

type UpdateWebAuthnCredentialCloneWarningParams struct {
	CredentialID []byte `json:"credential_id"`
	CloneWarning bool   `json:"clone_warning"`
}

func (q *Queries) UpdateWebAuthnCredentialCloneWarning(ctx context.Context, arg UpdateWebAuthnCredentialCloneWarningParams) error {
	_, err := q.db.Exec(ctx, updateWebAuthnCredentialCloneWarning, arg.CredentialID, arg.CloneWarning)
	return err
}

const updateWebAuthnCredentialLastUsed = `-- name: UpdateWebAuthnCredentialLastUsed :exec
UPDATE webauthn_credentials
SET last_used_at = NOW()
WHERE credential_id = $1
`

func (q *Queries) UpdateWebAuthnCredentialLastUsed(ctx context.Context, credentialID []byte) error {
	_, err := q.db.Exec(ctx, updateWebAuthnCredentialLastUsed, credentialID)
	return err
}

const updateWebAuthnCredentialSignCount = `-- name: UpdateWebAuthnCredentialSignCount :exec
UPDATE webauthn_credentials
SET sign_count = $2, last_used_at = NOW()
WHERE credential_id = $1
`

type UpdateWebAuthnCredentialSignCountParams struct {
	CredentialID []byte `json:"credential_id"`
	SignCount    int64  `json:"sign_count"`
}

func (q *Queries) UpdateWebAuthnCredentialSignCount(ctx context.Context, arg UpdateWebAuthnCredentialSignCountParams) error {
	_, err := q.db.Exec(ctx, updateWebAuthnCredentialSignCount, arg.CredentialID, arg.SignCount)
	return err
}
