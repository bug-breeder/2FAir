// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: backup_recovery.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuditLog = `-- name: CreateAuditLog :one
INSERT INTO audit_logs (
    user_id, action, resource_type, resource_id,
    metadata, ip_address, user_agent
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, action, resource_type, resource_id, metadata, ip_address, user_agent, timestamp
`

type CreateAuditLogParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	Action       string      `json:"action"`
	ResourceType string      `json:"resource_type"`
	ResourceID   pgtype.UUID `json:"resource_id"`
	Metadata     []byte      `json:"metadata"`
	IpAddress    *netip.Addr `json:"ip_address"`
	UserAgent    pgtype.Text `json:"user_agent"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) (AuditLog, error) {
	row := q.db.QueryRow(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.ResourceType,
		arg.ResourceID,
		arg.Metadata,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i AuditLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.ResourceType,
		&i.ResourceID,
		&i.Metadata,
		&i.IpAddress,
		&i.UserAgent,
		&i.Timestamp,
	)
	return i, err
}

const createBackupRecoveryCode = `-- name: CreateBackupRecoveryCode :one
INSERT INTO backup_recovery_codes (user_id, encrypted_backup_data, recovery_code_hash)
VALUES ($1, $2, $3)
RETURNING id, user_id, encrypted_backup_data, recovery_code_hash, is_used, created_at, used_at
`

type CreateBackupRecoveryCodeParams struct {
	UserID              pgtype.UUID `json:"user_id"`
	EncryptedBackupData []byte      `json:"encrypted_backup_data"`
	RecoveryCodeHash    []byte      `json:"recovery_code_hash"`
}

func (q *Queries) CreateBackupRecoveryCode(ctx context.Context, arg CreateBackupRecoveryCodeParams) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, createBackupRecoveryCode, arg.UserID, arg.EncryptedBackupData, arg.RecoveryCodeHash)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedBackupData,
		&i.RecoveryCodeHash,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getActiveBackupRecoveryCode = `-- name: GetActiveBackupRecoveryCode :one
SELECT id, user_id, encrypted_backup_data, recovery_code_hash, is_used, created_at, used_at FROM backup_recovery_codes
WHERE user_id = $1 AND is_used = FALSE
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetActiveBackupRecoveryCode(ctx context.Context, userID pgtype.UUID) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, getActiveBackupRecoveryCode, userID)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedBackupData,
		&i.RecoveryCodeHash,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getAuditLogsByAction = `-- name: GetAuditLogsByAction :many
SELECT id, user_id, action, resource_type, resource_id, metadata, ip_address, user_agent, timestamp FROM audit_logs
WHERE action = $1
    AND timestamp >= $2
    AND timestamp <= $3
ORDER BY timestamp DESC
LIMIT $4 OFFSET $5
`

type GetAuditLogsByActionParams struct {
	Action      string             `json:"action"`
	Timestamp   pgtype.Timestamptz `json:"timestamp"`
	Timestamp_2 pgtype.Timestamptz `json:"timestamp_2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

func (q *Queries) GetAuditLogsByAction(ctx context.Context, arg GetAuditLogsByActionParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByAction,
		arg.Action,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Metadata,
			&i.IpAddress,
			&i.UserAgent,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsByUserID = `-- name: GetAuditLogsByUserID :many
SELECT id, user_id, action, resource_type, resource_id, metadata, ip_address, user_agent, timestamp FROM audit_logs
WHERE user_id = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type GetAuditLogsByUserIDParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetAuditLogsByUserID(ctx context.Context, arg GetAuditLogsByUserIDParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Metadata,
			&i.IpAddress,
			&i.UserAgent,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBackupRecoveryCodeByID = `-- name: GetBackupRecoveryCodeByID :one
SELECT id, user_id, encrypted_backup_data, recovery_code_hash, is_used, created_at, used_at FROM backup_recovery_codes
WHERE id = $1 AND user_id = $2 AND is_used = FALSE
`

type GetBackupRecoveryCodeByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetBackupRecoveryCodeByID(ctx context.Context, arg GetBackupRecoveryCodeByIDParams) (BackupRecoveryCode, error) {
	row := q.db.QueryRow(ctx, getBackupRecoveryCodeByID, arg.ID, arg.UserID)
	var i BackupRecoveryCode
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EncryptedBackupData,
		&i.RecoveryCodeHash,
		&i.IsUsed,
		&i.CreatedAt,
		&i.UsedAt,
	)
	return i, err
}

const getRecentAuditLogs = `-- name: GetRecentAuditLogs :many
SELECT al.id, al.user_id, al.action, al.resource_type, al.resource_id, al.metadata, al.ip_address, al.user_agent, al.timestamp, u.username, u.email
FROM audit_logs al
LEFT JOIN users u ON al.user_id = u.id
WHERE al.timestamp >= $1
ORDER BY al.timestamp DESC
LIMIT $2 OFFSET $3
`

type GetRecentAuditLogsParams struct {
	Timestamp pgtype.Timestamptz `json:"timestamp"`
	Limit     int32              `json:"limit"`
	Offset    int32              `json:"offset"`
}

type GetRecentAuditLogsRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Action       string             `json:"action"`
	ResourceType string             `json:"resource_type"`
	ResourceID   pgtype.UUID        `json:"resource_id"`
	Metadata     []byte             `json:"metadata"`
	IpAddress    *netip.Addr        `json:"ip_address"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	Timestamp    pgtype.Timestamptz `json:"timestamp"`
	Username     pgtype.Text        `json:"username"`
	Email        pgtype.Text        `json:"email"`
}

func (q *Queries) GetRecentAuditLogs(ctx context.Context, arg GetRecentAuditLogsParams) ([]GetRecentAuditLogsRow, error) {
	rows, err := q.db.Query(ctx, getRecentAuditLogs, arg.Timestamp, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentAuditLogsRow{}
	for rows.Next() {
		var i GetRecentAuditLogsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Metadata,
			&i.IpAddress,
			&i.UserAgent,
			&i.Timestamp,
			&i.Username,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const useBackupRecoveryCode = `-- name: UseBackupRecoveryCode :exec
UPDATE backup_recovery_codes
SET used_at = NOW(), is_used = TRUE
WHERE id = $1 AND user_id = $2
`

type UseBackupRecoveryCodeParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UseBackupRecoveryCode(ctx context.Context, arg UseBackupRecoveryCodeParams) error {
	_, err := q.db.Exec(ctx, useBackupRecoveryCode, arg.ID, arg.UserID)
	return err
}
