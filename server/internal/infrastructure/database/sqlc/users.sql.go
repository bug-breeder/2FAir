// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, display_name)
VALUES ($1, $2, $3)
RETURNING id, username, email, display_name, created_at, updated_at, last_login_at, is_active
`

type CreateUserParams struct {
	Username    string `json:"username"`
	Email       string `json:"email"`
	DisplayName string `json:"display_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.DisplayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET is_active = FALSE
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, display_name, created_at, updated_at, last_login_at, is_active FROM users
WHERE email = $1 AND is_active = TRUE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, display_name, created_at, updated_at, last_login_at, is_active FROM users
WHERE id = $1 AND is_active = TRUE
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, display_name, created_at, updated_at, last_login_at, is_active FROM users
WHERE username = $1 AND is_active = TRUE
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = COALESCE($2, username),
    email = COALESCE($3, email),
    display_name = COALESCE($4, display_name)
WHERE id = $1
RETURNING id, username, email, display_name, created_at, updated_at, last_login_at, is_active
`

type UpdateUserParams struct {
	ID          pgtype.UUID `json:"id"`
	Username    pgtype.Text `json:"username"`
	Email       pgtype.Text `json:"email"`
	DisplayName pgtype.Text `json:"display_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.DisplayName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET last_login_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}
